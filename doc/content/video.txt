title: Video streams

Basically streaming videos does not change anything compared to streaming audio:
you just have to use video files instead of sound files! For instance, if you
want to stream a single file to an icecast server in ogg format (with theora and
vorbis as codecs for audio and video) you can simply type:

%%
source = single("video.avi")

output.icecast(
        %ogg(%theora(quality=25,width=320,height=240),%vorbis),
        host="localhost",
        port=8000,
        password="hackme",
        mount="/videostream",
        source)
%%

And of course you could have used a @playlist@ instead of @single@ to have
multiple files, or used other "formats":encoding_formats.html for the stream.

In order to test a video stream, it is often convenient to use the @output.sdl@
operator (or @output.graphics@) which will open a window and display the video
stream inside. These can handle streams with video only, you can use the
@drop_audio@ operator to remove the sound part of a stream if needed.

You should be expecting much higher resource needs (in cpu time in particular)
for video than for audio. So, be prepared to hear the fan of your computer! The
size of videos have a great impact on computations; if your machine cannot
handle a stream (i.e. it's always catching up) you can try to encode to smaller
videos for a start.

h3. Useful tips & tricks

Video is a really exciting world where there are lots of cool stuff to do.

h4. Transitions

Transitions at the beginning or at the end of video can be achieved using
@video.fade.in@ and @video.fade.out@. For instance, fading at the beginning of
videos is done by

%%
source = video.fade.in(transition="fade",duration=3.,source)
%%

h4. Adding a logo

You can add a logo (any image) using the @video.add_image@ operator, as follows:

%%
source = video.add_image(
       width=30,height=30,
       x=10,y=10,
       file="logo.jpg",
       source)
%%

h4. Inputting from a webcam

If your computer has a webcam, it can be used as a source thanks to the
@input.v4l2@ operator. For instance:

%%
output.sdl(input.v4l2())
%%

h4. Video in video

Suppose that you have two video sources @source@ and @source2@ and you want to
display a small copy of @source2@ on top of @source@. This can be achieved by

%%
source2 = video.scale(scale=0.2,x=10,y=10,source2)
source = add([source,source2])
%%

h4. Scrolling text

Adding scrolling text at the bottom of your video is as easy as

%%
source = video.add_text.sdl(
       font="/usr/share/fonts/truetype/ttf-dejavu/DejaVuSans.ttf",
       "Hello world!", source)
%%

You might need to change the @font@ parameter so that it matches a font file
present on your system.

h4. Effects

There are many of effects that you can use to add some fun to your videos:
@video.greyscale@, @video.sepia@, @video.lomo@, etc. "Read the
documentation":reference.html to find out about them. If you have compiled
Liquidsoap with "frei0r":http://www.piksel.org/frei0r/ support, and have
installed frei0r plugins, they will be named @video.frei0r.*@. You can have a
list of those supported on your installation as usual, using @liquidsoap --list-plugins@.

h4. Presenting weather forecast

You can say that a specific color should be transparent using
@video.transparent@. For instance, you can put yourself in front of a blue
screen (whose RGB color should be around 0x0000ff) and replace the blue screen
by an image of the weather using

%%
img = single("weather.jpg")
cam = input.v4l2()
cam = video.transparent(color=0x0000ff,precision=0.2,cam)
source = add([img,cam])
%%

h3. Advanced parameters

h4. Default size for videos

Internally, Liquidsoap uses a video format which is the same for all frames. You
can change it by doing

%%
set("frame.video.width",320)
set("frame.video.height",240)
set("frame.video.samplerate",24)
%%

Using higher values result in higher quality videos produced, but this also
means more computations to perform!

h4. Converters

Most videos need to be rescaled to the Liquidsoap internal format. The default
converter is the GAVL library but you can choose other (such as @native@ or
@ffmpeg@) by

%%
set("video.converter.preferred", "ffmpeg")
%%

If you are using @gavl@, you can change the scaling mode by

%%
set("video.converter.gavl.scale_mode", "quadratic")
%%

Several modes beside @quadratic@ are available, use @liquidsoap --conf-descr@
to discover them. Keep in mind that you should keep a good balance between
performance and quality!
