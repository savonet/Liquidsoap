name: CI
on:
  pull_request:
  push:
    branches:
      - main
      - rolling-release-*
      - v*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_details:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.build_details.outputs.branch }}
      sha: ${{ steps.build_details.outputs.sha }}
      is_release: ${{ steps.build_details.outputs.is_release }}
      is_rolling_release: ${{ steps.build_details.outputs.is_rolling_release }}
      build_os: ${{ steps.build_details.outputs.build_os }}
      build_platform: ${{ steps.build_details.outputs.build_platform }}
      build_include: ${{ steps.build_details.outputs.build_include }}
      build_opam: ${{ steps.build_details.outputs.build_opam }}
      docker_release: ${{ steps.build_details.outputs.docker_release }}
      s3-artifact-basepath: ${{ steps.build_details.outputs.s3-artifact-basepath }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get build details
        run: .github/scripts/build-details.sh
        id: build_details

  build_posix:
    runs-on: ${{ matrix.runs-on }}
    needs: build_details
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.build_details.outputs.build_os) }}
        platform: ${{ fromJson(needs.build_details.outputs.build_platform) }}
        include: ${{ fromJson(needs.build_details.outputs.build_include) }}
        exclude:
          - os: debian_bullseye
            platform: armhf
          - os: ubuntu_jammy
            platform: armhf
          - os: ubuntu_focal
            platform: armhf
    container:
      image: savonet/liquidsoap-ci-asan:${{ matrix.os }}_${{ matrix.platform }}
      options: --user root --privileged -v ${{ github.workspace }}/${{ github.run_number }}:/tmp/${{ github.run_number }}
    env:
      HOME: /home/opam
      ASAN_OPTIONS: detect_leaks=0,exitcode=0
    steps:
      - name: Get number of CPU cores
        uses: savonet/github-actions-cpu-cores-docker@v1
        id: cpu_cores
      - name: Checkout code
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          rm -rf doc/content/build.md doc/content/install.md
          sudo -u opam -E git remote set-url origin https://github.com/savonet/liquidsoap.git
          sudo -u opam -E git fetch origin ${{ github.sha }}
          sudo -u opam -E git checkout ${{ github.sha }}
      - name: Update debian packages
        if: contains(matrix.os, 'debian') || contains(matrix.os, 'ubuntu')
        run: |
          echo "opam hold" | sudo dpkg --set-selections
          sudo apt-get update
          sudo apt-get -y dist-upgrade
          sudo apt-get -y autoremove
      - name: Update alpine packages
        if: matrix.os == 'alpine'
        run: |
          apk add opam=`apk version opam | grep opam | cut -d' ' -f 1 | sed 's#opam-##'g`
          [ "${{ matrix.platform }}" = "armhf" ] && apk add ocaml=`apk version ocaml | grep ocaml | cut -d' ' -f 1 | sed 's#ocaml-##'g`
          apk -U --force-overwrite upgrade
      - name: Build
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          export CPU_CORES=${{ steps.cpu_cores.outputs.count }}
          sudo -u opam -E ./.github/scripts/build-posix.sh ${{ steps.cpu_cores.outputs.count }} ${{ matrix.platform }}
      - name: Build doc
        if: contains(matrix.os, 'debian') || contains(matrix.os, 'ubuntu')
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          sudo -u opam -E ./.github/scripts/build-doc.sh
      - name: Build debian package
        if: contains(matrix.os, 'debian') || contains(matrix.os, 'ubuntu')
        id: build_deb
        run: |
          mkdir -p /tmp/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}/debian
          chown -R opam /tmp/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}/debian
          cd /tmp/liquidsoap-full/liquidsoap
          sudo -u opam -E ./.github/scripts/build-deb.sh ${{ github.sha }} ${{ needs.build_details.outputs.branch }} ${{ matrix.os }} ${{ matrix.platform }} "${{ needs.build_details.outputs.is_rolling_release }}" "${{ needs.build_details.outputs.is_release }}"
          ls -l ${{ github.workspace }}/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}/debian
      - name: Upload debian packages artifacts
        if: (contains(matrix.os, 'debian') || contains(matrix.os, 'ubuntu')) && matrix.platform != 'armhf'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.build_deb.outputs.basename }}
          path: ${{ github.workspace }}/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}/debian
          if-no-files-found: error
      - name: Upload debian armhf packages artifacts
        if: contains(matrix.os, 'debian') && matrix.platform == 'armhf'
        uses: savonet/aws-s3-docker-action@master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE: ${{ github.workspace }}/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}/debian
          TARGET: ${{ needs.build_details.outputs.s3-artifact-basepath }}
      - name: Build alpine package
        if: matrix.os == 'alpine'
        id: build_apk
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          apk add alpine-sdk
          adduser opam abuild
          mkdir -p /tmp/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}/alpine
          chown -R opam /tmp/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}/alpine
          sudo -u opam -E ./.github/scripts/build-apk.sh ${{ needs.build_details.outputs.branch }} ${{ matrix.os }} ${{ matrix.platform }} ${{ matrix.alpine-arch }} "${{ needs.build_details.outputs.is_rolling_release }}" "${{ needs.build_details.outputs.is_release }}" ${{ github.sha }}
      - name: Upload alpine packages artifacts
        if: matrix.os == 'alpine'
        uses: savonet/aws-s3-docker-action@master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE: ${{ github.workspace }}/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}/alpine
          TARGET: ${{ needs.build_details.outputs.s3-artifact-basepath }}
      - name: Cleanup
        if: ${{ always() }}
        run: |
          rm -rf /tmp/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}

  fetch_s3_artifacts:
    runs-on: ubuntu-latest
    needs: [build_details, build_posix]
    steps:
      - name: Prepare directory
        run: |
          rm -rf ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts
          mkdir -p ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts
      - name: Fetch S3 artifacts
        uses: savonet/aws-s3-docker-action@master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE: ${{ needs.build_details.outputs.s3-artifact-basepath }}
          TARGET: ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts
      - name: Get alpine amd64 package name
        id: apk_amd64
        run: |
          echo "##[set-output name=path;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep -v dbg | grep x86_64)"
          echo "##[set-output name=name;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep -v dbg | grep x86_64 | xargs basename)"
      - name: Upload alpine amd64 package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.apk_amd64.outputs.name }}
          path: ${{ steps.apk_amd64.outputs.path }}
          if-no-files-found: error
      - name: Get alpine arm64 package name
        if: contains(needs.build_details.outputs.build_platform, 'arm64')
        id: apk_arm64
        run: |
          echo "##[set-output name=path;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep -v dbg | grep aarch64)"
          echo "##[set-output name=name;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep -v dbg | grep aarch64 | xargs basename)"
      - name: Upload alpine arm64 package
        if: contains(needs.build_details.outputs.build_platform, 'arm64')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.apk_arm64.outputs.name }}
          path: ${{ steps.apk_arm64.outputs.path }}
          if-no-files-found: error
      - name: Get alpine armhf package name
        if: contains(needs.build_details.outputs.build_platform, 'armhf')
        id: apk_armhf
        run: |
          echo "##[set-output name=path;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep -v dbg | grep armv7)"
          echo "##[set-output name=name;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep -v dbg | grep armv7 | xargs basename)"
      - name: Upload alpine armhf package
        if: contains(needs.build_details.outputs.build_platform, 'armhf')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.apk_armhf.outputs.name }}
          path: ${{ steps.apk_armhf.outputs.path }}
          if-no-files-found: error
      - name: Get debian armhf package name
        if: contains(needs.build_details.outputs.build_platform, 'armhf')
        id: deb_armhf
        run: |
          echo "##[set-output name=path;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'deb$' | grep -v dbgsym | grep armhf)"
          echo "##[set-output name=name;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'deb$' | grep -v dbgsym | grep armhf | xargs basename)"
      - name: Upload debian armhf package
        if: contains(needs.build_details.outputs.build_platform, 'armhf')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.deb_armhf.outputs.name }}
          path: ${{ steps.deb_armhf.outputs.path }}
      - name: Get debian armhf debug package name
        if: contains(needs.build_details.outputs.build_platform, 'armhf')
        id: deb_armhf_dbg
        run: |
          echo "##[set-output name=path;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'deb$' | grep dbgsym | grep armhf)"
          echo "##[set-output name=name;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'deb$' | grep dbgsym | grep armhf | xargs basename)"
      - name: Upload debian armhf debug package
        if: contains(needs.build_details.outputs.build_platform, 'armhf')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.deb_armhf_dbg.outputs.name }}
          path: ${{ steps.deb_armhf_dbg.outputs.path }}
      - name: Cleanup
        if: ${{ always() }}
        run: |
          rm -rf /tmp/${{ github.run_number }}/s3-artifacts

  build_docker:
    runs-on: ${{ matrix.runs-on }}
    needs: [build_details, build_posix, fetch_s3_artifacts]
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.build_details.outputs.build_platform) }}
        include: ${{ fromJson(needs.build_details.outputs.build_include) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download all artifact
        uses: actions/download-artifact@v2
        with:
          path: artifacts/${{ needs.build_details.outputs.sha }}
      - name: Get debian testing package
        run: echo "##[set-output name=deb-file;]$(find artifacts/${{ needs.build_details.outputs.sha }} -type f | grep debian-testing | grep '${{ matrix.platform }}\.deb$' | grep -v dbgsym | grep deb)"
        id: debian_package
      - name: Get debian testing debug package
        run: echo "##[set-output name=deb-file;]$(find artifacts/${{ needs.build_details.outputs.sha }} -type f | grep debian-testing | grep '${{ matrix.platform }}\.deb$' | grep dbgsym | grep deb)"
        id: debian_debug_package
      - name: Log in to the github registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build docker image
        run: .github/scripts/build-docker.sh ${{ steps.debian_package.outputs.deb-file }} ${{ steps.debian_debug_package.outputs.deb-file }} ${{ needs.build_details.outputs.branch }} ${{ secrets.DOCKERHUB_USER }} ${{ secrets.DOCKERHUB_PASSWORD }} ${{ matrix.platform }} ${{ matrix.docker-platform }}
