name: CI
on:
  pull_request:
  push:
    branches:
      - main

jobs:
  cancel_previous_run:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

  build_details:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.build_details.outputs.branch }}
      sha: ${{ steps.build_details.outputs.sha }}
      is_release: ${{ steps.build_details.outputs.is_release }}
      build_os: ${{ steps.build_details.outputs.build_os }}
      build_platform: ${{ steps.build_details.outputs.build_platform }}
      build_include: ${{ steps.build_details.outputs.build_include }}
      docker_release: ${{ steps.build_details.outputs.docker_release }}
      should_build_code: ${{ steps.build_details.outputs.should_build_code }}
      s3-artifact-basepath: ${{ steps.build_details.outputs.s3-artifact-basepath }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get build details
        run: .github/scripts/build-details.sh
        id: build_details

  export_tarball:
    runs-on: ubuntu-latest
    container:
      image: savonet/liquidsoap-ci:debian_bullseye_amd64
      options: --user root -v ${{ github.workspace }}/${{ github.run_number }}:/tmp/${{ github.run_number }}
    env:
      HOME: /home/opam
    steps:
      - name: Checkout code
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          rm -rf doc/content/build.md doc/content/install.md
          sudo -u opam -E git remote set-url origin https://github.com/savonet/liquidsoap.git
          sudo -u opam -E git fetch origin $GITHUB_SHA
          sudo -u opam -E git checkout $GITHUB_SHA
      - name: Build tarball
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          sudo -u opam -E ./.github/scripts/build-tarball.sh
      - name: Get filename
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          sudo -u opam -E ./.github/scripts/tarball-filename.sh
        id: tarball_filename
      - name: Copy tarball
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          mkdir -p /tmp/${{ github.run_number }}/tarball
          cp ${{ steps.tarball_filename.outputs.filename }} /tmp/${{ github.run_number }}/tarball
      - name: Export tarball
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.tarball_filename.outputs.filename }}
          path: ${{ github.workspace }}/${{ github.run_number }}/tarball/${{ steps.tarball_filename.outputs.filename }}
          if-no-files-found: error
      - name: Cleanup
        if: ${{ always() }}
        run: |
          rm -rf /tmp/${{ github.run_number }}/tarball


  build_minimal:
    runs-on: ubuntu-latest
    needs: build_details
    if: needs.build_details.outputs.should_build_code
    container:
      image: savonet/liquidsoap-ci:debian_bullseye_amd64
      options: --user opam
    env:
      HOME: /home/opam
    steps:
      - name: Checkout code
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          rm -rf doc/content/build.md doc/content/install.md
          git remote set-url origin https://github.com/savonet/liquidsoap.git
          git fetch origin $GITHUB_SHA
          git checkout $GITHUB_SHA
      - name: Build
        run: |
          cd /tmp/liquidsoap-full
          git remote set-url origin https://github.com/savonet/liquidsoap-full.git
          git fetch --recurse-submodules=no && git checkout origin/master -- Makefile.git
          make public
          git reset --hard
          git pull
          cp PACKAGES.minimal PACKAGES
          eval $(opam config env) && ocamlfind query curl | xargs rm -rf
          opam info -f "depopts:" liquidsoap | grep -v osx-secure-transport | grep -v lilv | xargs opam remove --force -y
          cd liquidsoap
          ./.github/scripts/build-posix.sh
          ./src/liquidsoap --no-stdlib ./libs/stdlib.liq ./libs/deprecations.liq --check 'print("hello world")'
      - name: Build doc
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          ./.github/scripts/build-doc.sh

  run_tests:
    runs-on: ubuntu-latest
    needs: build_details
    if: needs.build_details.outputs.should_build_code
    container:
      image: savonet/liquidsoap-ci:debian_bullseye_amd64
      options: --user root --privileged --ulimit core=-1 --security-opt seccomp=unconfined -v ${{ github.workspace }}/${{ github.run_number }}:/tmp/${{ github.run_number }}
    env:
      HOME: /home/opam
    steps:
      - name: Get number of CPU cores
        uses: savonet/github-actions-cpu-cores-docker@v1
        id: cpu_cores
      - name: Enable core dump
        run: |
          ulimit -c unlimited
          mkdir -p /tmp/${{ github.run_number }}/core
          chown -R opam /tmp/${{ github.run_number }}/core
          echo /tmp/${{ github.run_number }}/core/core.%h.%e.%t > /proc/sys/kernel/core_pattern
      - name: Checkout code
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          rm -rf doc/content/build.md doc/content/install.md
          sudo -u opam -E git remote set-url origin https://github.com/savonet/liquidsoap.git
          sudo -u opam -E git fetch origin $GITHUB_SHA
          sudo -u opam -E git checkout $GITHUB_SHA
      - name: Build
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          export CPU_CORES=${{ steps.cpu_cores.outputs.count }}
          sudo -u opam -E ./.github/scripts/build-posix.sh ${{ steps.cpu_cores.outputs.count }}
          cp /tmp/liquidsoap-full/liquidsoap/src/liquidsoap /tmp/${{ github.run_number }}/core
      - name: Run tests
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          sudo -u opam -E ./.github/scripts/test-posix.sh ${{ steps.cpu_cores.outputs.count }}
      - name: Export potential core dumps
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: core-dump-${{ matrix.os }}-${{ matrix.platform }}
          path: ${{ github.workspace }}/${{ github.run_number }}/core
      - name: Cleanup
        if: ${{ always() }}
        run: |
          rm -rf /tmp/${{ github.run_number }}/core

  build_opam:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v1
      - name: Setup OCaml
        uses: ocaml/setup-ocaml@v2
      - name: Install liquidsoap
        run: |
          opam install --cli=2.1 --confirm-level=unsafe-yes .

  build_posix:
    runs-on: ${{ matrix.runs-on }}
    needs: build_details
    if: needs.build_details.outputs.should_build_code
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.build_details.outputs.build_os) }}
        platform: ${{ fromJson(needs.build_details.outputs.build_platform) }}
        include: ${{ fromJson(needs.build_details.outputs.build_include) }}
        exclude:
          - os: debian_testing
            platform: armhf
          - os: debian_buster
            platform: armhf
          - os: ubuntu_groovy
            platform: armhf
          - os: ubuntu_focal
            platform: armhf
    container:
      image: savonet/liquidsoap-ci:${{ matrix.os }}_${{ matrix.platform }}
      options: --user root --privileged -v ${{ github.workspace }}/${{ github.run_number }}:/tmp/${{ github.run_number }}
    env:
      HOME: /home/opam
    steps:
      - name: Get number of CPU cores
        uses: savonet/github-actions-cpu-cores-docker@v1
        id: cpu_cores
      - name: Checkout code
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          rm -rf doc/content/build.md doc/content/install.md
          sudo -u opam -E git remote set-url origin https://github.com/savonet/liquidsoap.git
          sudo -u opam -E git fetch origin $GITHUB_SHA
          sudo -u opam -E git checkout $GITHUB_SHA
      - name: Build
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          export CPU_CORES=${{ steps.cpu_cores.outputs.count }}
          sudo -u opam -E ./.github/scripts/build-posix.sh ${{ steps.cpu_cores.outputs.count }}
      - name: Build doc
        if: contains(matrix.os, 'debian') || contains(matrix.os, 'ubuntu')
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          sudo -u opam -E ./.github/scripts/build-doc.sh
      - name: Build debian package
        if: contains(matrix.os, 'debian') || contains(matrix.os, 'ubuntu')
        id: build_deb
        run: |
          mkdir -p /tmp/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}/debian
          chown -R opam /tmp/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}/debian
          cd /tmp/liquidsoap-full/liquidsoap
          sudo -u opam -E ./.github/scripts/build-deb.sh "$GITHUB_SHA" ${{ needs.build_details.outputs.branch }} ${{ matrix.os }} ${{ matrix.platform }} ${{ needs.build_details.outputs.is_release }}
      - name: Upload debian packages artifacts
        if: (contains(matrix.os, 'debian') || contains(matrix.os, 'ubuntu')) && matrix.platform != 'armhf'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.build_deb.outputs.basename }}
          path: ${{ github.workspace }}/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}/debian
          if-no-files-found: error
      - name: Upload debian armhf packages artifacts
        if: contains(matrix.os, 'debian') && matrix.platform == 'armhf'
        uses: savonet/aws-s3-docker-action@master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE: ${{ github.workspace }}/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}/debian
          TARGET: ${{ needs.build_details.outputs.s3-artifact-basepath }}
      - name: Build alpine package
        if: matrix.os == 'alpine'
        id: build_apk
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          apk add alpine-sdk
          adduser opam abuild
          mkdir -p /tmp/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}/alpine
          chown -R opam /tmp/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}/alpine
          sudo -u opam -E ./.github/scripts/build-apk.sh ${{ needs.build_details.outputs.branch }} ${{ matrix.os }} ${{ matrix.platform }} ${{ matrix.alpine-arch }} ${{ needs.build_details.outputs.is_release }}
      - name: Upload alpine packages artifacts
        if: matrix.os == 'alpine'
        uses: savonet/aws-s3-docker-action@master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE: ${{ github.workspace }}/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}/alpine
          TARGET: ${{ needs.build_details.outputs.s3-artifact-basepath }}
      - name: Cleanup
        if: ${{ always() }}
        run: |
          rm -rf /tmp/${{ github.run_number }}/${{ matrix.os }}_${{ matrix.platform }}

  fetch_s3_artifacts:
    runs-on: ubuntu-latest
    needs: [build_details, build_posix]
    steps:
      - name: Prepare directory
        run: |
          rm -rf ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts
          mkdir -p ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts
      - name: Fetch S3 artifacts
        uses: savonet/aws-s3-docker-action@master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE: ${{ needs.build_details.outputs.s3-artifact-basepath }}
          TARGET: ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts
      - name: Get alpine amd64 package name
        id: apk_amd64
        run: |
          echo "##[set-output name=path;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep -v dbg | grep x86_64)"
          echo "##[set-output name=name;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep -v dbg | grep x86_64 | xargs basename)"
      - name: Upload alpine amd64 package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.apk_amd64.outputs.name }}
          path: ${{ steps.apk_amd64.outputs.path }}
          if-no-files-found: error
      - name: Get alpine amd64 debug package name
        id: apk_amd64_dbg
        run: |
          echo "##[set-output name=path;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep dbg | grep x86_64)"
          echo "##[set-output name=name;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep dbg | grep x86_64 | xargs basename)"
      - name: Upload alpine amd64 debug package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.apk_amd64_dbg.outputs.name }}
          path: ${{ steps.apk_amd64_dbg.outputs.path }}
          if-no-files-found: error
      - name: Get alpine arm64 package name
        if: contains(needs.build_details.outputs.build_platform, 'arm64')
        id: apk_arm64
        run: |
          echo "##[set-output name=path;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep -v dbg | grep aarch64)"
          echo "##[set-output name=name;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep -v dbg | grep aarch64 | xargs basename)"
      - name: Upload alpine arm64 package
        if: contains(needs.build_details.outputs.build_platform, 'arm64')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.apk_arm64.outputs.name }}
          path: ${{ steps.apk_arm64.outputs.path }}
          if-no-files-found: error
      - name: Get alpine arm64 debug package name
        if: contains(needs.build_details.outputs.build_platform, 'arm64')
        id: apk_arm64_dbg
        run: |
          echo "##[set-output name=path;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep dbg | grep aarch64)"
          echo "##[set-output name=name;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep dbg | grep aarch64 | xargs basename)"
      - name: Upload alpine amd64 debug package
        if: contains(needs.build_details.outputs.build_platform, 'arm64')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.apk_arm64_dbg.outputs.name }}
          path: ${{ steps.apk_arm64_dbg.outputs.path }}
          if-no-files-found: error
      - name: Get alpine armhf package name
        if: contains(needs.build_details.outputs.build_platform, 'armhf')
        id: apk_armhf
        run: |
          echo "##[set-output name=path;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep -v dbg | grep armv7)"
          echo "##[set-output name=name;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep -v dbg | grep armv7 | xargs basename)"
      - name: Upload alpine armhf package
        if: contains(needs.build_details.outputs.build_platform, 'armhf')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.apk_armhf.outputs.name }}
          path: ${{ steps.apk_armhf.outputs.path }}
          if-no-files-found: error
      - name: Get alpine armhf debug package name
        if: contains(needs.build_details.outputs.build_platform, 'armhf')
        id: apk_armhf_dbg
        run: |
          echo "##[set-output name=path;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep dbg | grep armv7)"
          echo "##[set-output name=name;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'apk$' | grep dbg | grep armv7 | xargs basename)"
      - name: Upload alpine amrhf debug package
        if: contains(needs.build_details.outputs.build_platform, 'armhf')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.apk_armhf_dbg.outputs.name }}
          path: ${{ steps.apk_armhf_dbg.outputs.path }}
          if-no-files-found: error
      - name: Get debian armhf package name
        if: contains(needs.build_details.outputs.build_platform, 'armhf')
        id: deb_armhf
        run: |
          echo "##[set-output name=path;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'deb$' | grep -v dbgsym | grep armhf)"
          echo "##[set-output name=name;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'deb$' | grep -v dbgsym | grep armhf | xargs basename)"
      - name: Upload debian armhf package
        if: contains(needs.build_details.outputs.build_platform, 'armhf')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.deb_armhf.outputs.name }}
          path: ${{ steps.deb_armhf.outputs.path }}
      - name: Get debian armhf debug package name
        if: contains(needs.build_details.outputs.build_platform, 'armhf')
        id: deb_armhf_dbg
        run: |
          echo "##[set-output name=path;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'deb$' | grep dbgsym | grep armhf)"
          echo "##[set-output name=name;]$(find ${{ github.workspace }}/${{ github.run_number }}/s3-artifacts -type f | grep 'deb$' | grep dbgsym | grep armhf | xargs basename)"
      - name: Upload debian armhf debug package
        if: contains(needs.build_details.outputs.build_platform, 'armhf')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.deb_armhf_dbg.outputs.name }}
          path: ${{ steps.deb_armhf_dbg.outputs.path }}
      - name: Cleanup
        if: ${{ always() }}
        run: |
          rm -rf /tmp/${{ github.run_number }}/s3-artifacts

  build_win32:
    runs-on: ubuntu-latest
    needs: build_details
    if: needs.build_details.outputs.should_build_code
    strategy:
      fail-fast: false
      matrix:
        system: [x64]
    container:
      image: savonet/liquidsoap-win32-deps-${{ matrix.system }}
      options: --user root -v ${{ github.workspace }}/${{ github.run_number }}:/tmp/${{ github.run_number }}
    env:
      OPAM_DEPS: ao-windows,lastfm-windows,camomile-windows,cry-windows,dtools-windows,duppy-windows,ffmpeg-windows,menhir-windows,mm-windows,ocurl-windows,pcre-windows,portaudio-windows,samplerate-windows,sedlex-windows,ssl-windows,srt-windows,taglib-windows,winsvc-windows,yojson-windows
    steps:
      - name: Get number of CPU cores
        uses: savonet/github-actions-cpu-cores-docker@v1
        id: cpu_cores
      - name: Checkout code
        run: |
          mkdir -p /tmp/${{ github.run_number }}/win32/liquidsoap
          cd /tmp/${{ github.run_number }}/win32/liquidsoap
          git init
          git remote add origin https://github.com/${{ github.repository }}.git
          git fetch --depth 1 origin ${{ github.sha }}
          git checkout FETCH_HEAD
          chown -R opam /tmp/${{ github.run_number }}/win32
      - name: Add local packages
        run: |
          cd /tmp/${{ github.run_number }}/win32/liquidsoap/
          gosu opam:root ./.github/scripts/add-local-opam-packages.sh
      - name: Build windows binary
        run: |
          mkdir -p /tmp/${{ github.run_number }}/win32/dist
          chown -R opam /tmp/${{ github.run_number }}/win32/dist
          cd /tmp/${{ github.run_number }}/win32/liquidsoap
          gosu opam:root ./.github/scripts/build-win32.sh ${{ matrix.system }} ${{ needs.build_details.outputs.branch }} ${{ steps.cpu_cores.outputs.count }}
        id: build
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.build.outputs.basename }}
          path: ${{ github.workspace }}/${{ github.run_number }}/win32/dist
          if-no-files-found: error
      - name: Cleanup
        if: ${{ always() }}
        run: |
          rm -rf /tmp/${{ github.run_number }}/win32

  update_release:
    runs-on: ubuntu-latest
    needs: [build_details, build_opam, build_posix, build_win32, fetch_s3_artifacts]
    if: needs.build_details.outputs.is_release
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Tag commit
        uses: savonet/latest-tag@any-context
        with:
          description: Liquidsoap ${{ needs.build_details.outputs.branch }}
          tag-name: ${{ needs.build_details.outputs.branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Download all artifact
        uses: actions/download-artifact@v2
        with:
          path: artifacts/${{ needs.build_details.outputs.sha }}
      - name: List assets to upload
        run: |
          echo "RELEASE_ASSETS<<EOF" >> $GITHUB_ENV
          find artifacts/${{ needs.build_details.outputs.sha }} -type f | sort -u >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Upload assets to release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ needs.build_details.outputs.branch }}
          files:  ${{ env.RELEASE_ASSETS }}
          prerelease: true
          draft: true

  build_docker:
    runs-on: ${{ matrix.runs-on }}
    needs: [build_details, run_tests, build_posix, fetch_s3_artifacts]
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.build_details.outputs.build_platform) }}
        include: ${{ fromJson(needs.build_details.outputs.build_include) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download all artifact
        uses: actions/download-artifact@v2
        with:
          path: artifacts/${{ needs.build_details.outputs.sha }}
      - name: Get debian bullseye package
        run: echo "##[set-output name=deb-file;]$(find artifacts/${{ needs.build_details.outputs.sha }} -type f | grep debian-bullseye | grep '${{ matrix.platform }}\.deb$' | grep -v dbgsym | grep deb)"
        id: debian_package
      - name: Get debian bullseye debug package
        run: echo "##[set-output name=deb-file;]$(find artifacts/${{ needs.build_details.outputs.sha }} -type f | grep debian-bullseye | grep '${{ matrix.platform }}\.deb$' | grep dbgsym | grep deb)"
        id: debian_debug_package
      - name: Log in to the github registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build docker image
        run: .github/scripts/build-docker.sh ${{ steps.debian_package.outputs.deb-file }} ${{ steps.debian_debug_package.outputs.deb-file }} ${{ needs.build_details.outputs.branch }} ${{ secrets.DOCKERHUB_USER }} ${{ secrets.DOCKERHUB_PASSWORD }} ${{ matrix.platform }} ${{ matrix.docker-platform }}

  build_docker_alpine:
    runs-on: ${{ matrix.runs-on }}
    needs: [build_details, run_tests, build_posix, fetch_s3_artifacts]
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.build_details.outputs.build_platform) }}
        include: ${{ fromJson(needs.build_details.outputs.build_include) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download all artifact
        uses: actions/download-artifact@v2
        with:
          path: artifacts/${{ needs.build_details.outputs.sha }}
      - name: Get alpine package
        run: echo "##[set-output name=apk-file;]$(find artifacts/${{ needs.build_details.outputs.sha }} -type f | grep 'apk$' | grep -v dbg | grep ${{ matrix.alpine-arch }})"
        id: alpine_package
      - name: Get alpine debug package
        run: echo "##[set-output name=apk-file;]$(find artifacts/${{ needs.build_details.outputs.sha }} -type f | grep 'apk$' | grep dbg | grep ${{ matrix.alpine-arch }})"
        id: alpine_dbg_package
      - name: Log in to the github registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build docker image
        run: .github/scripts/build-docker-alpine.sh ${{ steps.alpine_package.outputs.apk-file }} ${{ steps.alpine_dbg_package.outputs.apk-file }} ${{ needs.build_details.outputs.branch }} ${{ secrets.DOCKERHUB_USER }} ${{ secrets.DOCKERHUB_PASSWORD }} ${{ matrix.platform }} ${{ matrix.docker-platform }}

  build_docker_release:
    runs-on: ubuntu-latest
    needs: [build_details, build_opam, build_docker, build_docker_alpine]
    if: needs.build_details.outputs.docker_release
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Push consolidated manifest
        run: .github/scripts/push-docker.sh ${{ needs.build_details.outputs.branch }} ${{ secrets.DOCKERHUB_USER }} ${{ secrets.DOCKERHUB_PASSWORD }} ${{ github.actor }} ${{ secrets.GITHUB_TOKEN }}
