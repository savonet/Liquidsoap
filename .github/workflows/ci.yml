name: CI
on:
  pull_request:
  push:
    branches:
      - main

jobs:
  cancel_previous_run:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

  get_branch_name:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.branch_name.outputs.branch }}
      is_release: ${{ steps.branch_name.outputs.is_release }}
      docker_release: ${{ steps.branch_name.outputs.docker_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Extract branch name
        run: .github/scripts/branch-name.sh
        id: branch_name

  export_tarball:
    runs-on: ubuntu-latest
    container:
      image: savonet/liquidsoap-ci:debian_testing_amd64
      options: --user root -v "/home/runner/work/tarball":"/tmp/tarball" 
    env:
      HOME: /home/opam
    steps:
      - name: Checkout code
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          sudo -u opam -E git fetch origin $GITHUB_SHA
          sudo -u opam -E git checkout $GITHUB_SHA
      - name: Build tarball
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          sudo -u opam -E ./.github/scripts/build-tarball.sh
      - name: Get filename
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          sudo -u opam -E ./.github/scripts/tarball-filename.sh
        id: tarball_filename
      - name: Copy tarball
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          cp ${{ steps.tarball_filename.outputs.filename }} /tmp/tarball
      - name: Export tarball
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.tarball_filename.outputs.filename }}
          path: /home/runner/work/tarball/${{ steps.tarball_filename.outputs.filename }}


  build_minimal:
    runs-on: ubuntu-latest
    needs: get_branch_name
    container:
      image: savonet/liquidsoap-ci:debian_testing_amd64
      options: --user opam
    env:
      HOME: /home/opam
    steps:
      - name: Checkout code
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          git fetch origin $GITHUB_SHA
          git checkout $GITHUB_SHA
      - name: Build
        run: |
          cd /tmp/liquidsoap-full
          git pull
          cp PACKAGES.minimal PACKAGES
          opam info -f "depopts:" liquidsoap | grep -v osx-secure-transport | grep -v lilv | xargs opam remove -y
          cd liquidsoap
          ./.github/scripts/build-posix.sh
      - name: Build doc
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          ./.github/scripts/build-doc.sh

  build_posix:
    runs-on: ${{ matrix.runs-on }}
    needs: get_branch_name
    strategy:
      fail-fast: false
      matrix:
        os: [debian_stable, debian_testing, ubuntu_groovy, ubuntu_focal]
        platform: [amd64, arm64]
        include:
          - platform: amd64
            runs-on: ubuntu-latest
          - platform: arm64
            runs-on: self-hosted
    container:
      image: savonet/liquidsoap-ci:${{ matrix.os }}_${{ matrix.platform }}
      options: --user root --privileged --ulimit core=-1 --security-opt seccomp=unconfined -v "/home/runner/work/core":"/tmp/core" -v "/home/runner/work/debian":"/tmp/debian"
    env:
      HOME: /home/opam
    steps:
      - name: Enable core dump
        run: |
          ulimit -c unlimited
          mkdir -p /tmp/core
          chown -R opam /tmp/core
          echo '/tmp/core/core.%h.%e.%t' > /proc/sys/kernel/core_pattern
      - name: Checkout code
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          sudo -u opam -E git fetch origin $GITHUB_SHA
          sudo -u opam -E git checkout $GITHUB_SHA
      - name: Build
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          # Remove after liquidsoap 2.0 release
          sudo -u opam -E opam install -y posix-time2
          sudo -u opam -E ./.github/scripts/build-posix.sh
          cp /tmp/liquidsoap-full/liquidsoap/src/liquidsoap /tmp/core
      - name: Build doc
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          sudo -u opam -E ./.github/scripts/build-doc.sh
      - name: Run tests
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          sudo -u opam -E ./.github/scripts/test-posix.sh
      - name: Build debian package
        run: |
          cd /tmp/liquidsoap-full/liquidsoap
          chown -R opam /tmp/debian/pkgs
          sudo -u opam -E ./.github/scripts/build-deb.sh "$GITHUB_SHA" ${{ needs.get_branch_name.outputs.branch }} ${{ matrix.os }}_${{ matrix.platform }}
      - name: Export potential core dumps
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: core-dump-${{ matrix.os }}-${{ matrix.platform }}
          path: /home/runner/work/core
      - name: Upload debian packages artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.build_deb.outputs.basename }}
          path: /home/runner/work/debian/${{ matrix.os }}_${{ matrix.platform }}/${{ steps.build_deb.outputs.basename }}.deb

  build_win32:
    runs-on: ubuntu-latest
    needs: get_branch_name
    strategy:
      fail-fast: false
      matrix:
        system: [x64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Build
        run: .github/scripts/build-win32.sh ${{ matrix.system }} ${{ needs.get_branch_name.outputs.branch }}
        id: build
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.build.outputs.basename }}
          path: ${{ steps.build.outputs.basename }}.zip

  update_release:
    runs-on: ubuntu-latest
    needs: [get_branch_name, build_posix, build_win32]
    if: ${{ needs.get_branch_name.outputs.is_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Tag commit
        uses: savonet/latest-tag@any-context
        with:
          description: Liquidsoap ${{ needs.get_branch_name.outputs.branch }}
          tag-name: ${{ needs.get_branch_name.outputs.branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Download all artifact
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: List assets to upload
        run: echo "##[set-output name=assets;]$(find artifacts -type f | xargs)"
        id: list_assets
      - name: Upload assets to release
        uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.get_branch_name.outputs.branch }}
          files:  ${{ steps.list_assets.outputs.assets }}
          prerelease: true
          gzip: false
          allow_override: true

  build_docker:
    runs-on: ${{ matrix.runs-on }}
    needs: [get_branch_name, build_posix]
    strategy:
      matrix:
        platform: [amd64, arm64]
        include:
          - platform: amd64
            runs-on: ubuntu-latest
          - platform: arm64
            runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Download all artifact
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Get debian testing package
        run: echo "##[set-output name=deb-file;]$(find artifacts -type f | grep debian-testing | grep $PLATFORM | grep deb)"
        env:
          PLATFORM: ${{ matrix.platform }}
        id: debian_package
      - name: Build docker image
        run: .github/scripts/build-docker.sh ${{ steps.debian_package.outputs.deb-file }} ${{ needs.get_branch_name.outputs.branch }} ${{ secrets.DOCKERHUB_USER }} ${{ secrets.DOCKERHUB_PASSWORD }} amd64

  build_docker_release:
    runs-on: ubuntu-latest
    needs: [get_branch_name, build_docker]
    if: ${{ needs.get_branch_name.outputs.docker_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Push consolidated manifest
        run: .github/scripts/push-docker.sh ${{ needs.get_branch_name.outputs.branch }} ${{ secrets.DOCKERHUB_USER }} ${{ secrets.DOCKERHUB_PASSWORD }}
