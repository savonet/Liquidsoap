(env
 (dev
  (flags
   (:standard -w -7-9 -warn-error -26-27-33))))

(include_subdirs unqualified)

(menhir
 (modules parser json_parser))

(rule
 (target build_config.ml)
 (action
  (with-stdout-to
   %{target}
   (progn
    (echo "let is_release = %{env:LIQUIDSOAP_RELEASE_BUILD=false}\n")
    (echo "let git_sha = match String.trim \"")
    (with-accepted-exit-codes
     (or 0 128)
     (run git rev-parse --short HEAD))
    (echo "\" with \"\" -> None | s -> Some s\n")
    (echo "let version = \"%{version:liquidsoap-lang}\"\n")
    (echo
     "let version = version ^ (if is_release then \"\" else (match git_sha with None -> \"+dev\" | Some sha -> \"+git@\" ^ sha))\n")
    (echo "let ext_exe = \"%{ocaml-config:ext_exe}\"\n")
    (echo "let architecture = \"%{ocaml-config:architecture}\"\n")
    (echo "let host = \"%{ocaml-config:host}\"\n")
    (echo "let target = \"%{ocaml-config:target}\"\n")
    (echo "let system = \"%{ocaml-config:system}\"\n")
    (echo "let ocamlopt_cflags = \"%{ocaml-config:ocamlopt_cflags}\"\n")
    (echo "let native_c_compiler = \"%{ocaml-config:native_c_compiler}\"\n")
    (echo
     "let native_c_libraries = \"%{ocaml-config:native_c_libraries}\"\n")))))

(library
 (name liquidsoap_lang)
 (public_name liquidsoap-lang)
 (library_flags -linkall)
 (preprocess
  (pps sedlex.ppx))
 (libraries str unix menhirLib)
 (modules
  build_config
  builtins_bool
  builtins_eval
  builtins_files
  builtins_getter
  builtins_json
  builtins_lang
  builtins_list
  builtins_math
  builtins_null
  builtins_profiler
  builtins_regexp
  builtins_string
  builtins_ref
  console
  doc
  environment
  error
  evaluation
  ground_type
  hooks
  json_base
  json_lexer
  json_parser
  json
  lang
  lang_core
  lang_error
  lang_regexp
  lang_string
  lexer
  modules
  parser
  parser_helper
  pos
  preprocessor
  profiler
  repr
  regexp
  runtime
  runtime_error
  term
  type
  type_alias
  type_base
  typechecking
  typing
  unifier
  value))
